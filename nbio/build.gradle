dependencies {
    compile project(':util')
}

project.ext {
    srcpath = "${projectDir}/src/main/java"
    nbiopath = srcpath + "/seda/nbio"
    includeDirName = "${buildDir}/include"
}


task javahNBIO {
    dependsOn nbio:classes
    FileTree tree = fileTree(dir: project.nbiopath)
    tree.include "*.java"

    inputs.files sourceSets.main.output.asFileTree.matching({include "${buildDir}/classes/main/seda/nbio/*.class"})
    outputs.files tree.collect({File thefile2 -> project.includeDirName + "/" + thefile2.name.substring(0, thefile2.name.length() - 5) + '.h'})

    doLast {
        def includeDir = new File(project.includeDirName)
        includeDir.mkdir()
        tree.each({File thefile3 ->
            ext.classname = "seda.nbio." + thefile3.name.substring(0, thefile3.name.length() - 5)
            ext.outfile = project.ext.includeDirName + "/" + thefile3.name.substring(0, thefile3.name.length() - 5) + '.h'
            ant.javah(class: classname, outputFile: outfile, classpath: sourceSets.main.output.asPath)
        })
    }
}


task buildNBIOLib(type:Exec) {
    FileTree tree = fileTree(dir: nbiopath)
    tree.include '*.java'

    // TODO: only invoke this task if some of those files have changed
    inputs.files tree.each({File thefile2 -> project.ext.includeDirName + "/" + thefile2.name.substring(0, thefile2.name.length() - 5) + '.h'})
    outputs.file "${buildDir}/libNBIO.so"
    dependsOn javahNBIO
    workingDir 'src/main/cpp/seda'
    commandLine 'make', 'clean', 'all'
}

// before we can compile javah must have built the header
build.dependsOn buildNBIOLib